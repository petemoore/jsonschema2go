{"name":"Jsonschema2go","tagline":"Go code generator that generates go types that can be used for unmarshaling json into that conforms to the given json schema","body":"# jsonschema2go\r\n[![Build Status](https://secure.travis-ci.org/petemoore/jsonschema2go.png)](http://travis-ci.org/petemoore/jsonschema2go)\r\n[![GoDoc](https://godoc.org/github.com/petemoore/jsonschema2go?status.png)](https://godoc.org/github.com/petemoore/jsonschema2go)\r\n# Overview\r\nAre you writing a service in go that needs to interpret json data, and you already have a json schema definition for the format of the json?\r\n\r\nTypically, you would need to unmarshal the json into a go type in order to use the data. The go type could be:\r\n\r\n1. A generic `interface{}` ... ouch\r\n2. A hand-crafted type ... not bad\r\n3. An auto-generated type ... even better!\r\n\r\nThis library auto-generates your go types for you.\r\n\r\n# Real-World Example\r\n\r\nHere is a real-world example json schema taken from the taskcluster project. Try it out yourself if you like:\r\n\r\n```\r\n$ echo 'http://schemas.taskcluster.net/queue/v1/create-task-request.json' | jsonschema2go -o example.go\r\n```\r\n\r\n```\r\n{\r\n    \"id\": \"http://schemas.taskcluster.net/queue/v1/create-task-request.json#\",\r\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n    \"title\": \"Task Definition\",\r\n    \"description\": \"Definition of a task that can be scheduled\\n\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"provisionerId\": {\r\n            \"title\": \"Provisioner Id\",\r\n            \"description\": \"Unique identifier for a provisioner, that can supply specified\\n`workerType`\\n\",\r\n            \"type\": \"string\",\r\n            \"minLength\": 1,\r\n            \"maxLength\": 22,\r\n            \"pattern\": \"^([a-zA-Z0-9-_]*)$\"\r\n        },\r\n        \"workerType\": {\r\n            \"title\": \"Worker Type\",\r\n            \"description\": \"Unique identifier for a worker-type within a specific provisioner\\n\",\r\n            \"type\": \"string\",\r\n            \"minLength\": 1,\r\n            \"maxLength\": 22,\r\n            \"pattern\": \"^([a-zA-Z0-9-_]*)$\"\r\n        },\r\n        \"schedulerId\": {\r\n            \"title\": \"Scheduler Identifier\",\r\n            \"description\": \"Identifier for the scheduler that _defined_ this task, this can be an\\nidentifier for a user or a service like the `\\\"task-graph-scheduler\\\"`.\\nAlong with the `taskGroupId` this is used to form the permission scope\\n`queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`,\\nthis scope is necessary to _schedule_ a defined task, or _rerun_ a task.\\n\",\r\n            \"type\": \"string\",\r\n            \"minLength\": 1,\r\n            \"maxLength\": 22,\r\n            \"pattern\": \"^([a-zA-Z0-9-_]*)$\",\r\n            \"default\": \"-\"\r\n        },\r\n        \"taskGroupId\": {\r\n            \"title\": \"Task-Group Identifier\",\r\n            \"description\": \"Identifier for a group of tasks scheduled together with this task, by\\nscheduler identified by `schedulerId`. For tasks scheduled by the\\ntask-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if\\nproperty isn't specified.\\n\",\r\n            \"type\": \"string\",\r\n            \"pattern\": \"^[a-zA-Z0-9-_]{22}$\"\r\n        },\r\n        \"routes\": {\r\n            \"title\": \"Task Specific Routes\",\r\n            \"description\": \"List of task specific routes, AMQP messages will be CC'ed to these routes.\\n\",\r\n            \"type\": \"array\",\r\n            \"default\": [],\r\n            \"items\": {\r\n                \"title\": \"Task Specific Route\",\r\n                \"description\": \"A task specific route, AMQP messages will be CC'ed with a routing key\\nmatching `route.<task-specific route>`. It's possible to dot (`.`) in\\nthe task specific route to make sub-keys, etc. See the RabbitMQ\\n[tutorial](http://www.rabbitmq.com/tutorials/tutorial-five-python.html)\\nfor examples on how to use routing-keys.\\n\",\r\n                \"type\": \"string\",\r\n                \"maxLength\": 249,\r\n                \"minLength\": 1\r\n            },\r\n            \"maxItems\": 10,\r\n            \"uniqueItems\": true\r\n        },\r\n        \"retries\": {\r\n            \"title\": \"Retries\",\r\n            \"description\": \"Number of times to retry the task in case of infrastructure issues.\\nAn _infrastructure issue_ is a worker node that crashes or is shutdown,\\nthese events are to be expected.\\n\",\r\n            \"type\": \"integer\",\r\n            \"minimum\": 0,\r\n            \"maximum\": 50,\r\n            \"default\": 5\r\n        },\r\n        \"created\": {\r\n            \"title\": \"Created\",\r\n            \"description\": \"Creation time of task\",\r\n            \"type\": \"string\",\r\n            \"format\": \"date-time\"\r\n        },\r\n        \"deadline\": {\r\n            \"title\": \"Deadline\",\r\n            \"description\": \"Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future\",\r\n            \"type\": \"string\",\r\n            \"format\": \"date-time\"\r\n        },\r\n        \"expires\": {\r\n            \"title\": \"Expiration\",\r\n            \"description\": \"Task expiration, time at which task definition and status is deleted.\\nNotice that all artifacts for the must have an expiration that is no\\nlater than this. If this property isn't it will be set to `deadline`\\nplus one year (this default may subject to change).\\n\",\r\n            \"type\": \"string\",\r\n            \"format\": \"date-time\"\r\n        },\r\n        \"scopes\": {\r\n            \"title\": \"Scopes\",\r\n            \"description\": \"List of scopes (or scope-patterns) that the task is\\nauthorized to use.\\n\",\r\n            \"type\": \"array\",\r\n            \"default\": [],\r\n            \"items\": {\r\n                \"title\": \"Scope\",\r\n                \"description\": \"A scope (or scope-patterns) which the task is\\nauthorized to use. This can be a string or a string\\nending with `*` which will authorize all scopes for\\nwhich the string is a prefix.\\n\",\r\n                \"type\": \"string\"\r\n            }\r\n        },\r\n        \"payload\": {\r\n            \"title\": \"Task Payload\",\r\n            \"description\": \"Task-specific payload following worker-specific format. For example the\\n`docker-worker` requires keys like: `image`, `commands` and\\n`features`. Refer to the documentation of `docker-worker` for details.\\n\",\r\n            \"type\": \"object\"\r\n        },\r\n        \"metadata\": {\r\n            \"title\": \"Meta-data\",\r\n            \"description\": \"Required task metadata\\n\",\r\n            \"type\": \"object\",\r\n            \"properties\": {\r\n                \"name\": {\r\n                    \"title\": \"Name\",\r\n                    \"description\": \"Human readable name of task, used to very briefly given an idea about\\nwhat the task does.\\n\",\r\n                    \"type\": \"string\",\r\n                    \"maxLength\": 255\r\n                },\r\n                \"description\": {\r\n                    \"title\": \"Description\",\r\n                    \"description\": \"Human readable description of the task, please **explain** what the\\ntask does. A few lines of documentation is not going to hurt you.\\n\",\r\n                    \"type\": \"string\",\r\n                    \"maxLength\": 32768\r\n                },\r\n                \"owner\": {\r\n                    \"title\": \"Owner\",\r\n                    \"description\": \"E-mail of person who caused this task, e.g. the person who did\\n`hg push`. The person we should contact to ask why this task is here.\\n\",\r\n                    \"type\": \"string\",\r\n                    \"format\": \"email\",\r\n                    \"maxLength\": 255\r\n                },\r\n                \"source\": {\r\n                    \"title\": \"Source\",\r\n                    \"description\": \"Link to source of this task, should specify a file, revision and\\nrepository. This should be place someone can go an do a git/hg blame\\nto who came up with recipe for this task.\\n\",\r\n                    \"type\": \"string\",\r\n                    \"format\": \"uri\",\r\n                    \"maxLength\": 4096\r\n                }\r\n            },\r\n            \"additionalProperties\": false,\r\n            \"required\": [\r\n                \"name\",\r\n                \"description\",\r\n                \"owner\",\r\n                \"source\"\r\n            ]\r\n        },\r\n        \"tags\": {\r\n            \"title\": \"Tags\",\r\n            \"description\": \"Arbitrary key-value tags (only strings limited to 4k). These can be used\\nto attach informal meta-data to a task. Use this for informal tags that\\ntasks can be classified by. You can also think of strings here as\\ncandidates for formal meta-data. Something like\\n`purpose: 'build' || 'test'` is a good example.\\n\",\r\n            \"type\": \"object\",\r\n            \"additionalProperties\": {\r\n                \"type\": \"string\",\r\n                \"maxLength\": 4096\r\n            },\r\n            \"default\": {}\r\n        },\r\n        \"extra\": {\r\n            \"title\": \"Extra Data\",\r\n            \"description\": \"Object with properties that can hold any kind of extra data that should be\\nassociated with the task. This can be data for the task which doesn't\\nfit into `payload`, or it can supplementary data for use in services\\nlistening for events from this task. For example this could be details to\\ndisplay on _treeherder_, or information for indexing the task. Please, try\\nto put all related information under one property, so `extra` data keys\\nfor treeherder reporting and task indexing don't conflict, hence, we have\\nreusable services. **Warning**, do not stuff large data-sets in here,\\ntask definitions should not take-up multiple MiBs.\\n\",\r\n            \"type\": \"object\",\r\n            \"default\": {}\r\n        }\r\n    },\r\n    \"additionalProperties\": false,\r\n    \"required\": [\r\n        \"provisionerId\",\r\n        \"workerType\",\r\n        \"created\",\r\n        \"deadline\",\r\n        \"payload\",\r\n        \"metadata\"\r\n    ]\r\n}\r\n```\r\n\r\nJsonschema2go generates this code for you, directly from the schema definition:\r\n\r\n```go\r\n// The following code is AUTO-GENERATED. Please DO NOT edit.\r\n\r\npackage queue\r\n\r\nimport (\r\n\t\"time\"\r\n)\r\n\r\ntype (\r\n\t// Definition of a task that can be scheduled\r\n\t//\r\n\t// See http://schemas.taskcluster.net/queue/v1/create-task-request.json#\r\n\tTaskDefinition struct {\r\n\t\t// Creation time of task\r\n\t\tCreated time.Time `json:\"created\"`\r\n\t\t// Deadline of the task, `pending` and `running` runs are resolved as **failed** if not resolved by other means before the deadline. Note, deadline cannot be more than5 days into the future\r\n\t\tDeadline time.Time `json:\"deadline\"`\r\n\t\t// Task expiration, time at which task definition and status is deleted.\r\n\t\t// Notice that all artifacts for the must have an expiration that is no\r\n\t\t// later than this. If this property isn't it will be set to `deadline`\r\n\t\t// plus one year (this default may subject to change).\r\n\t\tExpires time.Time `json:\"expires\"`\r\n\t\t// Object with properties that can hold any kind of extra data that should be\r\n\t\t// associated with the task. This can be data for the task which doesn't\r\n\t\t// fit into `payload`, or it can supplementary data for use in services\r\n\t\t// listening for events from this task. For example this could be details to\r\n\t\t// display on _treeherder_, or information for indexing the task. Please, try\r\n\t\t// to put all related information under one property, so `extra` data keys\r\n\t\t// for treeherder reporting and task indexing don't conflict, hence, we have\r\n\t\t// reusable services. **Warning**, do not stuff large data-sets in here,\r\n\t\t// task definitions should not take-up multiple MiBs.\r\n\t\tExtra interface{} `json:\"extra\"`\r\n\t\t// Required task metadata\r\n\t\tMetadata struct {\r\n\t\t\t// Human readable description of the task, please **explain** what the\r\n\t\t\t// task does. A few lines of documentation is not going to hurt you.\r\n\t\t\tDescription string `json:\"description\"`\r\n\t\t\t// Human readable name of task, used to very briefly given an idea about\r\n\t\t\t// what the task does.\r\n\t\t\tName string `json:\"name\"`\r\n\t\t\t// E-mail of person who caused this task, e.g. the person who did\r\n\t\t\t// `hg push`. The person we should contact to ask why this task is here.\r\n\t\t\tOwner string `json:\"owner\"`\r\n\t\t\t// Link to source of this task, should specify a file, revision and\r\n\t\t\t// repository. This should be place someone can go an do a git/hg blame\r\n\t\t\t// to who came up with recipe for this task.\r\n\t\t\tSource string `json:\"source\"`\r\n\t\t} `json:\"metadata\"`\r\n\t\t// Task-specific payload following worker-specific format. For example the\r\n\t\t// `docker-worker` requires keys like: `image`, `commands` and\r\n\t\t// `features`. Refer to the documentation of `docker-worker` for details.\r\n\t\tPayload interface{} `json:\"payload\"`\r\n\t\t// Unique identifier for a provisioner, that can supply specified\r\n\t\t// `workerType`\r\n\t\tProvisionerId string `json:\"provisionerId\"`\r\n\t\t// Number of times to retry the task in case of infrastructure issues.\r\n\t\t// An _infrastructure issue_ is a worker node that crashes or is shutdown,\r\n\t\t// these events are to be expected.\r\n\t\tRetries int `json:\"retries\"`\r\n\t\t// List of task specific routes, AMQP messages will be CC'ed to these routes.\r\n\t\tRoutes []string `json:\"routes\"`\r\n\t\t// Identifier for the scheduler that _defined_ this task, this can be an\r\n\t\t// identifier for a user or a service like the `\"task-graph-scheduler\"`.\r\n\t\t// Along with the `taskGroupId` this is used to form the permission scope\r\n\t\t// `queue:assume:scheduler-id:<schedulerId>/<taskGroupId>`,\r\n\t\t// this scope is necessary to _schedule_ a defined task, or _rerun_ a task.\r\n\t\tSchedulerId string `json:\"schedulerId\"`\r\n\t\t// List of scopes (or scope-patterns) that the task is\r\n\t\t// authorized to use.\r\n\t\tScopes []string `json:\"scopes\"`\r\n\t\t// Arbitrary key-value tags (only strings limited to 4k). These can be used\r\n\t\t// to attach informal meta-data to a task. Use this for informal tags that\r\n\t\t// tasks can be classified by. You can also think of strings here as\r\n\t\t// candidates for formal meta-data. Something like\r\n\t\t// `purpose: 'build' || 'test'` is a good example.\r\n\t\tTags interface{} `json:\"tags\"`\r\n\t\t// Identifier for a group of tasks scheduled together with this task, by\r\n\t\t// scheduler identified by `schedulerId`. For tasks scheduled by the\r\n\t\t// task-graph scheduler, this is the `taskGraphId`.  Defaults to `taskId` if\r\n\t\t// property isn't specified.\r\n\t\tTaskGroupId string `json:\"taskGroupId\"`\r\n\t\t// Unique identifier for a worker-type within a specific provisioner\r\n\t\tWorkerType string `json:\"workerType\"`\r\n\t}\r\n)\r\n```\r\n\r\nNow you can unmarshal your json data into &TaskDefinition{} and you are done!\r\n\r\n# Installation\r\n\r\n```\r\ngo get github.com/petemoore/jsonschema2go\r\n```\r\n\r\n# Usage\r\n\r\n## Using with go generate\r\n\r\nTo use directly with go generate: include a line like this as a comment in one of your source files:\r\n\r\n```go\r\n//go:generate jsonschema2go -u http://schemas.taskcluster.net/queue/v1/create-task-request.json -o autogeneratedtypes.go\r\n```\r\n\r\nPlease note there is no space between `//` and `go:generate`.\r\n\r\nThe in your build process, include the following steps:\r\n\r\n```\r\ngo generate\r\ngo install\r\n```\r\n\r\n## Running as a standalone command\r\n\r\nRun with -h to see the full options. Normally you would pipe a list of urls to jsonschema2go, e.g.:\r\n\r\n```\r\n$ cat urls.txt | jsonschema2go -o mygeneratedcode.go\r\n```\r\n\r\n## Using from go, as a library\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n  \"fmt\"\r\n  \"github.com/petemoore/jsonschema2go/jsonschema2go\"\r\n)\r\n\r\nfunc main() {\r\n  err := jsonschema2go.URLsToFile(\"output.go\", \"http://foo.com/schema1\", \"http://foo.com/schema2\", ...)\r\n  if err != nil {\r\n    fmt.Println(\"Whoops, something went wrong...\")\r\n    panic(err)\r\n  }\r\n  fmt.Println(\"Yay, it worked.\")\r\n}\r\n```\r\n\r\n# Contributing\r\n\r\nContributions welcome, feel free to contact me as pmoore on irc.mozilla.org, or send me a pull request.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}